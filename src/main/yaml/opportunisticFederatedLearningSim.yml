incarnation: scafi

_constants:
  retentionTime: &retentionTime 15.0
  skewness: &skewness 0.5

variables:
  seed: &seed
    min: 0
    max: 10
    step: 1
    default: 1
  repetition: &repetition
    min: 0
    max: 10
    step: 1
    default: 1
  epochs: &epochs
    type: ArbitraryVariable
    parameters: [2, [2]]
  aggregateLocalEvery: &aggregateLocalEvery
    type: ArbitraryVariable
    parameters: [ 3, [ 3, 5, 10 ] ]
  areas: &areas
    type: ArbitraryVariable
    parameters: [9, [2, 4]]
  batchSize: &batchSize
    type: ArbitraryVariable
    parameters: [ 64, [ 64, 128 ] ]
  samplePerArea: &samplePerArea
    formula: 4
  dataShuffle: &dataShuffle
    type: ArbitraryVariable
    parameters: [true, [true, false]]
  dataFraction: &dataFraction
    formula: 0.2
  longSideNodes: &longSideNodes
    formula: 7
  shortSideNodes: &shortSideNodes
    formula: 8
  totalNodes: &totalNodes
    formula: longSideNodes * shortSideNodes
  initNN: &initNN
    language: scala
    formula: |
      import it.unibo.scafi.interop.PythonModules.utils
      utils.init_cnn(seed.asInstanceOf[Double].toInt)
  lossThreshold: &lossThreshold
    type: ArbitraryVariable
    parameters: [40.0, [20, 40, 80, 120]]
seeds:
  scenario: *seed
  simulation: *seed

network-model:
  type: ConnectWithinDistance
  parameters: [1.5]

_gradient: &gradient
  - time-distribution:
      type: DiracComb
      parameters: [ 0.1, 1 ]
    type: Event
    actions:
      - type: RunScafiProgram
        parameters: [it.unibo.scafi.OpportunisticFederatedLearning, *retentionTime]
  - program: send

monitors:
  - type: it.unibo.alchemist.model.monitors.DistributedTestSetEvaluation
    parameters: [*seed, *epochs, *aggregateLocalEvery, *areas, *dataShuffle, *lossThreshold]

layers:
  - type: PhenomenaDistribution
    parameters: [ 0, 0, *longSideNodes, *shortSideNodes, *areas, *samplePerArea, *dataShuffle, *dataFraction, *seed, true]
    molecule: Phenomena
  - type: PhenomenaDistribution
    parameters: [ 0, 0, *longSideNodes, *shortSideNodes, *areas, *samplePerArea, *dataShuffle, *dataFraction, *seed, false]
    molecule: TestSetPhenomena

deployments:
  - type: Grid
    parameters: [0, 0, *longSideNodes, *shortSideNodes, 1, 1, *skewness, *skewness]
    contents:
      - molecule: Seed
        concentration: *seed
      - molecule: LossThreshold
        concentration: *lossThreshold
      - molecule: Epochs
        concentration: *epochs
      - molecule: Areas
        concentration: *areas
      - molecule: AggregateLocalEvery
        concentration: *aggregateLocalEvery
      - molecule: BatchSize
        concentration: *batchSize
    programs: *gradient

terminate:
  type: AfterTime
  parameters: 50

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: "experiment"
      interval: 1.0
      exportPath: "data"
    data:
      - time
      - type: AreaCountExporter
      - type: AreaDiscrepancyExporter
        parameters: [ *areas ]
      - type: AreaCorrectnessExporter
      - type: AverageLossExporter
      - type: AverageAccuracyExporter
      - molecule: TrainLoss
        aggregators: [min, max, mean, variance]
        value-filter: onlyFinite
        precision: 3
      - molecule: ValidationLoss
        aggregators: [min, max, mean, variance]
        value-filter: onlyfinite
      - molecule: ValidationAccuracy
        aggregators: [min, max, mean, variance]
        value-filter: onlyfinite
